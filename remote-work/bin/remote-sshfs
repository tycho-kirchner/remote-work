#!/usr/bin/env bash

# wrapper around sshfs which tries to avoid deadlocks.
# s. https://askubuntu.com/a/1274431/509922
#    https://github.com/libfuse/sshfs/issues/3

source "$(dirname "$(realpath "${BASH_SOURCE[0]}")")/../lib/remote_commons.sh" || exit

print_usage(){
    pr_info 'Usage: sshfs-wrapper [options] SSH_ALIAS MOUNTPOINT'
}

unmount_if_exists(){
    local current_mount
    current_mount=$(awk -v mountpoint="$mountpoint" '$2==mountpoint {print $3}' /proc/self/mounts)
    if [ -n "$current_mount" ]; then
        if [[ $current_mount != 'fuse.sshfs' ]]; then
            pr_err "mountpoint $mountpoint is occupied with another mount of wrong" \
                   "type $current_mount. Exiting ..."
            exit 1
        fi
        pr_warn "unmounting probably stale $mountpoint"
        fusermount -u "$mountpoint" || {
            pr_warn "attempting lazy unmount ..."
            fusermount -u -z "$mountpoint"
        }
    fi
    return 0
}

do_connect(){
    local args=("$@")
    local hostname="${args[-2]}"
    local ssh_output
    local optstring
    local current_mount

    # use ssh before sshfs to avoid a short mount-popping up in the file-manager, when
    # we have no internet.
    _remote_wait_for_connection "$hostname"
    unmount_if_exists || return

    optstring="IdentityFile=$HOME/.ssh/id_rsa,ConnectTimeout=5,ConnectionAttempts=1"
    optstring+=",ServerAliveInterval=5,ServerAliveCountMax=3,follow_symlinks,cache_timeout=20,allow_root"
    # optstring="IdentityFile=$HOME/.ssh/id_rsa,ConnectTimeout=5,ConnectionAttempts=1"
    # optstring+=",reconnect,ServerAliveInterval=5,ServerAliveCountMax=3,follow_symlinks,cache_timeout=20,allow_root"

    # always mount at / for now
    args[-2]="${args[-2]}:/"
    sshfs -f -o "$optstring" "${args[@]}"
    pr_info "disconnected from ${args[*]}"
}

cleanup(){
    unmount_if_exists
}

main(){
    args=("$@")
    positional_args=()
    while [[ $# -gt 0 ]]; do
      case $1 in
      --version)
          remote_print_version
          exit
          ;;
        -h|--help)
          print_usage
          exit
          ;;
        --*|-*)
          shift
          ;;
        *)
          positional_args+=("$1")
          shift
          ;;
      esac
    done


    if [ ${#positional_args[@]} -lt 2 ]; then
        pr_err "invalid format: at least two positional arguments required"
        print_usage
        exit 1
    fi

    # allow multiple ssh aliases, separated by @: bcl100@bcl100home
    IFS='@' read -r -a hostnames <<< "${args[-2]}"
    mountpoint="${args[-1]}"

    [[ "$mountpoint" == */ ]] && mountpoint="${mountpoint::-1}" # pop trailing /

    if [[ "$mountpoint" == "$HOME/"* ]]; then
        pr_warn "warning - mounting below \$HOME may result in poor performance" \
               "as this path may be monitored by gvfs-udisks2-volume-monitor."
    fi

    unmount_if_exists || exit

    if ! test -e "$mountpoint"; then
        mkdir -p "$mountpoint" || exit
    elif [ -n "$(ls -A "$mountpoint")" ]; then
        pr_err "mountpoint $mountpoint is not empty"
        exit 1
    fi

    add_to_exit 'cleanup'


    while true; do
        for hostname in "${hostnames[@]}"; do
            # try only one host at a time...
            args[-2]="$hostname"
            do_connect "${args[@]}"
            sleep 1
        done
        sleep 2
    done
}

main "$@"; exit # exit in same line!
